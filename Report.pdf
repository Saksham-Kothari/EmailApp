# Email Application Project

## Project Overview

The **Email Application** project is a Java-based console application designed to manage the creation of employee email accounts for a company. 
This project demonstrates basic object-oriented programming principles, such as encapsulation, inheritance, and polymorphism. 
It allows users to generate email accounts with unique, random passwords and provides functionalities to set mailbox capacity, 
change passwords, and set alternative emails.

## Files Included

- **EmailApp.java**
- **Email.java**

### EmailApp.java

```java
package emailapp;

public class EmailApp {
    public static void main(String[] args) {
        Email em1 = new Email("Naruto", "Uzumaki");
        System.out.println(em1.showInfo());
    }
}
```

#### Description
The `EmailApp` class contains the `main` method, which serves as the entry point for the application. It creates an instance of 
the `Email` class for an employee named "Naruto Uzumaki" and displays the email information.

### Email.java

```java
package emailapp;

import java.util.Scanner;

public class Email {
    private String firstName;
    private String lastName;
    private String password;
    private String department;
    private String email;
    private int mailboxCapacity = 500;
    private int defaultPasswordLength = 8;
    private String companySuffix = "anycompany.com";
    private String alternativeEmail;

    // Constructor to receive the first name and last name
    public Email(String firstName, String lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
        System.out.println("EMAIL CREATED: " + this.firstName + " " + this.lastName);

        // Call method for asking for the department - return the department
        this.department = setDepartment();
        System.out.println("Department: " + this.department);

        // Call method that returns the random password
        this.password = randomPassword(defaultPasswordLength);
        System.out.println("Your password is: " + this.password);

        // Combine elements to generate email
        email = firstName.toLowerCase() + "." + lastName.toLowerCase() + "@" + department + "." + companySuffix;
        System.out.println("Your email is: " + email);
    }

    // Ask for Department
    private String setDepartment() {
        System.out.print("DEPARTMENT CODES:\n1 for Sales\n2 for Development\n3 for Accounting\n0 for None\nEnter Department code: ");
        Scanner in = new Scanner(System.in);
        int depChoice = in.nextInt();
        if (depChoice == 1) {
            return "Sales";
        } else if (depChoice == 2) {
            return "dev";
        } else if (depChoice == 3) {
            return "acct";
        } else {
            return " ";
        }
    }

    // Generate a random password
    private String randomPassword(int length) {
        String passwordSet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%";
        char[] password = new char[length];
        for (int i = 0; i < length; i++) {
            int rand = (int) (Math.random() * passwordSet.length());
            password[i] = passwordSet.charAt(rand);
        }
        return new String(password);
    }

    // Set the mailbox capacity
    public void setMailboxCapacity(int capacity) {
        this.mailboxCapacity = capacity;
    }

    // Set the alternative email
    public void setAlternativeEmail(String altEmail) {
        this.alternativeEmail = altEmail;
    }

    // Change the password
    public void changePassword(String password) {
        this.password = password;
    }

    // Get mailbox capacity
    public int getMailboxCapacity() {
        return mailboxCapacity;
    }

    // Get alternative email
    public String getAlternativeEmail() {
        return alternativeEmail;
    }

    // Get password
    public String getPassword() {
        return password;
    }

    // Show email information
    public String showInfo() {
        return "DISPLAY NAME: " + firstName + " " + lastName +
                "\nCOMPANY EMAIL: " + email +
                "\nMAILBOX CAPACITY: " + mailboxCapacity + "mb";
    }
}
```

#### Description
The `Email` class is responsible for creating an email account for a new employee. It includes methods to:

- Set the department
- Generate a random password
- Set mailbox capacity
- Set an alternative email address
- Change the password
- Display the email information

## Usage

To run the application, compile both `EmailApp.java` and `Email.java` and execute the `EmailApp` class. 
The program will prompt the user to enter a department code and then display the generated email details, 
including a randomly generated password.

### Example Output
```
EMAIL CREATED: Naruto Uzumaki
DEPARTMENT CODES:
1 for Sales
2 for Development
3 for Accounting
0 for None
Enter Department code: 2
Department: dev
Your password is: A1B2C3D4
Your email is: naruto.uzumaki@dev.anycompany.com
DISPLAY NAME: Naruto Uzumaki
COMPANY EMAIL: naruto.uzumaki@dev.anycompany.com
MAILBOX CAPACITY: 500mb
```

## Conclusion

This project serves as a foundational example of how to use Java to create a basic email management system. 
It incorporates fundamental concepts of object-oriented programming and provides a simple, interactive experience 
for users to create and manage email accounts.
